"use strict";function CCheckBox(parent,parameters){var parentNode,_default=!!parameters.checked,self=this;if(CBase.call(this,parent||null),this.parameters=parameters||{},this.parameters.attributes=parameters.attributes||{},this.name=parameters.name||"input",this.type=this.tagName="checkbox",this.style=parameters.style||"",this.events=parameters.events||{},void 0===(parentNode=parameters.parent)){if(void 0===parameters.element)throw"parentNode or element parameter must be specified";parentNode=parameters.element.parentNode}this.bind(this.events),this.IsChanged=function(){return _default!==self.IsChecked()},this.Init(parentNode)}CCheckBox.prototype=Object.create(CBase.prototype),CCheckBox.prototype.constructor=CCheckBox,CCheckBox.DefaultAttributes={checkbox:{type:"checkbox",className:"ccheck-box-input"},label:{className:"ccheck-box-label"},wrapper:{className:"ccheck-box-wrapper",tabIndex:"1"}},CCheckBox.prototype.onInit=function(){void 0!==this.parameters.element&&"INPUT"===this.parameters.element.nodeName&&"checkbox"===this.parameters.element.type&&(this.parameters.element.parentNode.removeChild(this.parameters.element),this.checkbox=this.parameters.element,elattr(this.checkbox,extend(CCheckBox.DefaultAttributes.checkbox,this.parameters.attributes.checkbox,!0))),void 0===this.checkbox&&(this.checkbox=this.generateCheckbox()),this.wrapper=this.generateWrapper(this.checkbox),this.wrapper.className+=" "+this.style,this.parameters.checked===!0&&this.Check(!0,!0),elchild(this.handleInner,this.wrapper)},CCheckBox.prototype.generateCheckbox=function(){var self=this,attrs=extend(CCheckBox.DefaultAttributes.checkbox,this.parameters.attributes.checkbox,!0);return void 0===attrs.id&&(attrs.id=CCheckBox.GenerateId()),attrs.onchange=function(){self.checked=this.checked,self.trigger("onChange",arguments)},attrs.onclick=function(){self.Check(!self.IsChecked())},element("input",attrs)},CCheckBox.prototype.generateWrapper=function(checkbox,label){var self=this;if(void 0===this.checkbox)throw"Checkbox must be created before label";return this.label=element("label",extend({htmlFor:this.checkbox.id},CCheckBox.DefaultAttributes.label)),this.label.onclick=function(){self.Check(!self.IsChecked())},element("div",CCheckBox.DefaultAttributes.wrapper,[checkbox,label||this.label])},CCheckBox.GenerateId=function(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)},CCheckBox.prototype.Check=function(checked,block_event){this.checked=this.checkbox.checked=checked===!0,block_event!==!0&&this.trigger("onChange")},CCheckBox.prototype.IsChecked=function(){return this.checkbox.checked===!0},CCheckBox.prototype.EventHandler=function(event){switch(event.code){case KEYS.LEFT:case KEYS.RIGHT:this.Check(event.code===KEYS.LEFT),event.stopped=!0}},CCheckBox.prototype.focus=function(){this.wrapper.focus()},Events.inject(CCheckBox);