"use strict";function Update(events){this.bind(events),this.check_url=this.update_url="",this.checked=!1}Update.CrashStatuses=[1,2,3,4,7,17,19,20,22,25,27],Update.OkStatus=21,Update.StatusMessages={1:"Signature init error",2:"Wrong device model",3:"Section size exceeds partition size on FLASH",4:"Required FLASH section not found. Aborting update",5:"Updating kernel",6:"Updating image",7:"Internal error",8:"Inspecting firmware",9:"Updating environment variables",10:"Updating Bootstrap section",11:"Skipping Bootstrap section",12:"Updating User FS section",13:"Skipping User FS section",14:"Updating second boot",15:"Updating logotype",16:"Update finished OK",17:"Wrong signature",18:"Erasing flash section",19:"Flash write error",20:"File write error",21:"Idle",22:"Invalid file header",23:"Inspecting update file",24:"File check finished",25:"File not found",26:"Initialising",27:"Read error"},Update.StartTFTP=function(timeout){var bootstrap_url=parseUri(Update.DefaultUpdateUrls.bootstrap_url),lan_params=["ipaddr","gatewayip","dnsip","netmask","ipaddr_conf"],lan_config=getEnvList(lan_params),type="up_dhcp_tftp",count=0;if(lan_config.ipaddr_conf&&"0.0.0.0"!==lan_params.ipaddr_conf){for(var i=0;i<lan_params.length;i++)lan_config[lan_params[i]]&&count++;if(count!==lan_params.length)return!1;type="up_ip_tftp"}return this.CheckUpdateByTFTP()?(setEnvList({serverip_conf:bootstrap_url.host,tftp_path_conf:bootstrap_url.relative.substr(1)})&&setTimeout(function(){gSTB.ExecAction("UpdateSW "+type)},timeout||0),!0):!1},Update.CheckUpdateByTFTP=function(){var update_url=parseUri(Update.DefaultUpdateUrls.update_url),ip_regexp=/^((?:[0-9]{1,3}\.){3}[0-9]{1,3})$/,bootstrap_regexp=/^(tftp):\/\/((?:[0-9]{1,3}\.){3}[0-9]{1,3})(:[0-9]+)?(\/.+)+$/;return-1===["igmp","tftp","http"].indexOf(update_url.protocol)?!1:"igmp"===update_url.protocol&&""!==update_url.relative?!1:"tftp"!==update_url.protocol&&"igmp"!==update_url.protocol||update_url.host.match(ip_regexp)?"Aura"===gSTB.GetDeviceModelExt().substr(0,4)?!1:!!Update.DefaultUpdateUrls.bootstrap_url.match(bootstrap_regexp):!1},Update.StartMulticast=function(timeout){var bootstrap_url=parseUri(Update.DefaultUpdateUrls.bootstrap_url);return this.CheckUpdateByMulticast&&setEnvList({mcip_conf:bootstrap_url.host,mcport_conf:bootstrap_url.port})?(setTimeout(function(){gSTB.ExecAction("UpdateSW up_mc_url")},timeout||0),!0):!1},Update.CheckUpdateByMulticast=function(){var regexp=/^(igmp):\/\/((?:[0-9]{1,3}\.){3}[0-9]{1,3})(:[0-9]+)?$/;return configuration.allowMulticastUpdate?!!Update.DefaultUpdateUrls.bootstrap_url.match(regexp)&&!!Update.DefaultUpdateUrls.update_url.match(regexp):!1},Update.DefaultUpdateUrls=getEnvList(["update_url","bootstrap_url"]),Update.prototype.Start=function(update_url){var status=stbUpdate.getStatus(),activeBank=stbUpdate.getActiveBank(),modelTemp=gSTB.RDir("Model").toUpperCase();if(status==Update.OkStatus&&this.update_url===update_url){if(this.trigger("onStart"),this.SystemButtons(!1),"MAG250"!==modelTemp&&"MAG270"!==modelTemp&&"MAG275"!==modelTemp&&-1!=activeBank&&2!=stbUpdate.GetFlashBankCount())return void this.trigger("onError",{errorMessage:_("Unable to update active memory bank"),logMessage:"Unable to update active memory bank",status:30});0==activeBank?stbUpdate.startUpdate(1,update_url):stbUpdate.startUpdate(0,update_url)}else this.CheckUpdate(update_url,!0);this.CheckProgress()},Update.prototype.CheckProgress=function(){var status=stbUpdate.getStatus(),self=this;this.CheckError(status)&&(this.auto_start===!0&&status===Update.OkStatus&&(this.auto_start=!1,this.Start(this.update_url)),this.trigger("onProgress",{percent:stbUpdate.getPercents(),statusMessage:_(Update.StatusMessages[status]),logMessage:Update.StatusMessages[status],status:status}),this.progress_timeout=setTimeout(function(){self.CheckProgress()},1e3))},Update.prototype.CheckError=function(status){return-1!==Update.CrashStatuses.indexOf(status)?(this.trigger("onError",{errorMessage:_(Update.StatusMessages[status]),logMessage:Update.StatusMessages[status],status:status}),this.SystemButtons(!0),!1):!0},Update.prototype.CheckUpdate=function(update_url,start_on_ready){"string"==typeof update_url&&stbUpdate.startCheck(this.check_url=update_url);var status=stbUpdate.getStatus(),self=this;if(this.CheckError(status))return this.trigger("onCheck",{statusMessage:_(Update.StatusMessages[status]),logMessage:Update.StatusMessages[status],status:status}),status===Update.OkStatus?(this.update_url=this.check_url,this.trigger("onReady"),void(start_on_ready===!0&&this.Start(this.update_url))):void(this.check_update_timeout=setTimeout(function(){self.CheckUpdate(null,start_on_ready)},100))},Update.prototype.GetImageInfo=function(){return stbUpdate.getStatus()===Update.OkStatus?{date:parseDate(stbUpdate.getImageDateStr()),description:stbUpdate.getImageDescStr(),version:stbUpdate.getImageVersionStr()}:null},Update.prototype.GetCurrentImageInfo=function(){if(void 0===this.curr_info){var info=JSON.parse(gSTB.GetEnv(JSON.stringify({varList:["Image_Desc","Image_Date","Image_Version"]}))).result;this.curr_info={date:parseDate(info.Image_Date),description:info.Image_Desc,version:info.Image_Version}}return this.curr_info},Update.prototype.Clear=function(){clearTimeout(this.check_update_timeout),clearTimeout(this.progress_timeout),this.auto_start=!1,this.update_url=""},Update.prototype.SystemButtons=function(enable){gSTB.EnableServiceButton(enable),gSTB.EnableVKButton(enable),gSTB.EnableAppButton(enable),gSTB.EnableTvButton(enable)},Events.inject(Update);